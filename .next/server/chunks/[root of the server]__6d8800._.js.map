{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/Deadpool/Hydroleaf_frontend/src/app/api/blog/route.tsx"],"sourcesContent":["import { randomUUID } from 'crypto';\nimport { PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { PrismaClient } from '@prisma/client';\nimport { NextResponse } from 'next/server';\n\nconst prisma = new PrismaClient();\n\nconst s3 = new S3Client({\n  region: process.env.AWS_REGION!,\n  credentials: {\n    accessKeyId: process.env.AWS_ACCESS_KEY!,\n    secretAccessKey: process.env.AWS_SECRET_KEY!,\n  },\n});\n\n// Fetch all blogs (GET)\nexport async function GET() {\n  try {\n    const blogs = await prisma.blog.findMany();\n    return NextResponse.json(blogs, { status: 200 });\n  } catch (error) {\n    console.error('Error fetching blogs:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Create a new blog (POST)\nexport async function POST(req: Request) {\n  try {\n    const formData = await req.formData();\n    const title = formData.get('title') as string;\n    const content = formData.get('content') as string;\n    const reverse = formData.get('reverse') === 'true';\n    const file = formData.get('file') as File;\n\n    if (!title || !content || !file) {\n      return NextResponse.json(\n        { error: 'Title, content, and image are required' },\n        { status: 400 }\n      );\n    }\n\n    // Generate a unique file name\n    const fileName = `${randomUUID()}-${file.name}`;\n\n    // Convert file to Buffer\n    const fileBuffer = Buffer.from(await file.arrayBuffer());\n\n    // Upload to S3\n    await s3.send(\n      new PutObjectCommand({\n        Bucket: process.env.AWS_BUCKET_NAME!,\n        Key: fileName,\n        Body: fileBuffer,\n        ContentType: file.type,\n      })\n    );\n\n    const imageUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${fileName}`;\n\n    // Save blog to database\n    const newBlog = await prisma.blog.create({\n      data: { title, content, image: imageUrl, reverse },\n    });\n\n    return NextResponse.json(newBlog, { status: 201 });\n  } catch (error) {\n    console.error('Error creating blog:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Update a blog by ID (PATCH)\nexport async function PATCH(req: Request) {\n  try {\n    const formData = await req.formData();\n    const id = formData.get('id') as string;\n    const title = formData.get('title') as string;\n    const content = formData.get('content') as string;\n    const reverse = formData.get('reverse') === 'true';\n    const file = formData.get('file') as File | null;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Blog ID is required' },\n        { status: 400 }\n      );\n    }\n\n    let imageUrl;\n\n    if (file) {\n      const fileName = `${randomUUID()}-${file.name}`;\n      const fileBuffer = Buffer.from(await file.arrayBuffer());\n\n      await s3.send(\n        new PutObjectCommand({\n          Bucket: process.env.AWS_BUCKET_NAME!,\n          Key: fileName,\n          Body: fileBuffer,\n          ContentType: file.type,\n        })\n      );\n\n      imageUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${fileName}`;\n    }\n\n    const updatedBlog = await prisma.blog.update({\n      where: { id: Number(id) },\n      data: {\n        title,\n        content,\n        image: imageUrl ?? undefined,\n        reverse,\n      },\n    });\n\n    return NextResponse.json(updatedBlog, { status: 200 });\n  } catch (error) {\n    console.error('Error updating blog:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Delete a blog by ID (DELETE)\nexport async function DELETE(req: Request) {\n  try {\n    const { id } = await req.json();\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Blog ID is required' },\n        { status: 400 }\n      );\n    }\n\n    await prisma.blog.delete({\n      where: { id: Number(id) },\n    });\n\n    return NextResponse.json(\n      { message: 'Blog deleted successfully' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Error deleting blog:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}