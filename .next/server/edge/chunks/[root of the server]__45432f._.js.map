{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/paraglide/runtime.js"],"sourcesContent":["/* eslint-disable */\n/** @type {((tag: AvailableLanguageTag) => void) | undefined} */\nlet _onSetLanguageTag\n\n/**\n * The project's source language tag.\n *\n * @example\n *   if (newlySelectedLanguageTag === sourceLanguageTag){\n *     // do nothing as the source language tag is the default language\n *     return\n *   }\n */\nexport const sourceLanguageTag = \"en\"\n\n/**\n * The project's available language tags.\n *\n * @example\n *   if (availableLanguageTags.includes(userSelectedLanguageTag) === false){\n *     throw new Error(\"Language tag not available\")\n *   }\n */\nexport const availableLanguageTags = /** @type {const} */ ([\"en\",\"pl\"])\n\n/**\n * Get the current language tag.\n *\n * @example\n *   if (languageTag() === \"de\"){\n *     console.log(\"Germany ðŸ‡©ðŸ‡ª\")\n *   } else if (languageTag() === \"nl\"){\n *     console.log(\"Netherlands ðŸ‡³ðŸ‡±\")\n *   }\n *\n * @type {() => AvailableLanguageTag}\n */\nexport let languageTag = () => sourceLanguageTag\n\n/**\n * Set the language tag.\n *\n * @example\n *\n *   // changing to language\n *   setLanguageTag(\"en\")\n *\n *   // passing a getter function also works.\n *   //\n *   // a getter function is useful for resolving a language tag\n *   // on the server where every request has a different language tag\n *   setLanguageTag(() => {\n *     return request.languageTag\n *   })\n *\n * @param {AvailableLanguageTag | (() => AvailableLanguageTag)} tag\n */\nexport const setLanguageTag = (tag) => {\n    if (typeof tag === \"function\") {\n        languageTag = enforceLanguageTag(tag)\n    } else {\n        languageTag = enforceLanguageTag(() => tag)\n    }\n    // call the callback function if it has been defined\n    if (_onSetLanguageTag !== undefined) {\n        _onSetLanguageTag(languageTag())\n    }\n}\n\n/**\n * Wraps an untrusted function and enforces that it returns a language tag.\n * @param {() => AvailableLanguageTag} unsafeLanguageTag\n * @returns {() => AvailableLanguageTag}\n */\nfunction enforceLanguageTag(unsafeLanguageTag) {\n    return () => {\n        const tag = unsafeLanguageTag()\n        if(!isAvailableLanguageTag(tag)) {\n            throw new Error(`languageTag() didn't return a valid language tag. Check your setLanguageTag call`)\n        }\n        return tag\n    }\n}\n\n/**\n * Set the `onSetLanguageTag()` callback function.\n *\n * The function can be used to trigger client-side side-effects such as\n * making a new request to the server with the updated language tag,\n * or re-rendering the UI on the client (SPA apps).\n *\n * - Don't use this function on the server (!).\n *   Triggering a side-effect is only useful on the client because a server-side\n *   environment doesn't need to re-render the UI.\n *\n * - The `onSetLanguageTag()` callback can only be defined once to avoid unexpected behavior.\n *\n * @example\n *   // if you use inlang paraglide on the server, make sure\n *   // to not call `onSetLanguageTag()` on the server\n *   if (isServer === false) {\n *     onSetLanguageTag((tag) => {\n *       // (for example) make a new request to the\n *       // server with the updated language tag\n *       window.location.href = `/${tag}/${window.location.pathname}`\n *     })\n *   }\n *\n * @param {(languageTag: AvailableLanguageTag) => void} fn\n */\nexport const onSetLanguageTag = (fn) => {\n    _onSetLanguageTag = fn\n}\n\n/**\n * Check if something is an available language tag.\n *\n * @example\n * \tif (isAvailableLanguageTag(params.locale)) {\n * \t\tsetLanguageTag(params.locale)\n * \t} else {\n * \t\tsetLanguageTag(\"en\")\n * \t}\n *\n * @param {any} thing\n * @returns {thing is AvailableLanguageTag}\n */\nexport function isAvailableLanguageTag(thing) {\n    return availableLanguageTags.includes(thing)\n}\n\n// ------ TYPES ------\n\n/**\n * A language tag that is available in the project.\n *\n * @example\n *   setLanguageTag(request.languageTag as AvailableLanguageTag)\n *\n * @typedef {typeof availableLanguageTags[number]} AvailableLanguageTag\n */"],"names":[],"mappings":"AAAA,kBAAkB,GAClB,8DAA8D;;;;;;;;AAC9D,IAAI;AAWG,MAAM,oBAAoB;AAU1B,MAAM,wBAA8C;IAAC;IAAK;CAAK;AAc/D,IAAI,cAAc,IAAM;AAoBxB,MAAM,iBAAiB,CAAC;IAC3B,IAAI,OAAO,QAAQ,YAAY;QAC3B,cAAc,mBAAmB;IACrC,OAAO;QACH,cAAc,mBAAmB,IAAM;IAC3C;IACA,oDAAoD;IACpD,IAAI,sBAAsB,WAAW;QACjC,kBAAkB;IACtB;AACJ;AAEA;;;;CAIC,GACD,SAAS,mBAAmB,iBAAiB;IACzC,OAAO;QACH,MAAM,MAAM;QACZ,IAAG,CAAC,uBAAuB,MAAM;YAC7B,MAAM,IAAI,MAAM,CAAC,gFAAgF,CAAC;QACtG;QACA,OAAO;IACX;AACJ;AA4BO,MAAM,mBAAmB,CAAC;IAC7B,oBAAoB;AACxB;AAeO,SAAS,uBAAuB,KAAK;IACxC,OAAO,sBAAsB,QAAQ,CAAC;AAC1C,EAEA,sBAAsB;CAEtB;;;;;;;CAOC"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/i18n.ts"],"sourcesContent":["import { Middleware, Navigation, PrefixStrategy } from '@inlang/paraglide-next';\n\nimport type { AvailableLanguageTag } from '@/paraglide/runtime';\n\nconst strategy = PrefixStrategy<AvailableLanguageTag>({\n  prefixDefault: 'never',\n\n  // don't generate alternate routes for the api\n  exclude: (pathname) => {\n    return pathname.startsWith('/api/') || pathname === '/api';\n  },\n});\n\nexport const middleware = Middleware({ strategy });\nexport const { Link, useRouter, usePathname, redirect, permanentRedirect } =\n  Navigation({ strategy });\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;;AAIA,MAAM,WAAW,CAAA,GAAA,2OAAA,CAAA,iBAAc,AAAD,EAAwB;IACpD,eAAe;IAEf,8CAA8C;IAC9C,SAAS,CAAC;QACR,OAAO,SAAS,UAAU,CAAC,YAAY,aAAa;IACtD;AACF;AAEO,MAAM,aAAa,CAAA,GAAA,+MAAA,CAAA,aAAU,AAAD,EAAE;IAAE;AAAS;AACzC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,iBAAiB,EAAE,GACxE,CAAA,GAAA,8NAAA,CAAA,aAAU,AAAD,EAAE;IAAE;AAAS"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import type { NextRequest } from 'next/server';\n\nimport { middleware as paraglide } from '@/lib/i18n';\n\nexport function middleware(request: NextRequest) {\n  const response = paraglide(request);\n  return response;\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AAEA;;AAEO,SAAS,WAAW,OAAoB;IAC7C,MAAM,WAAW,CAAA,GAAA,kHAAA,CAAA,aAAS,AAAD,EAAE;IAC3B,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}